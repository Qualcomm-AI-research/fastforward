# NOTE: This file is automatically generated, do not edit.
#
# The code below is adapted from Mypy (mypy/traverser.py)
#
# The MIT License
#
# Copyright (c) 2012-2023 Jukka Lehtosalo and contributors
# Copyright (c) 2015-2023 Dropbox, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

# ruff: noqa: D102, ARG002, E741, D415, CPY001

"""Generic node traverser visitor"""

from __future__ import annotations

import functools

from mypy.nodes import (
    REVEAL_TYPE,
    AssertStmt,
    AssertTypeExpr,
    AssignmentExpr,
    AssignmentStmt,
    AwaitExpr,
    Block,
    BreakStmt,
    BytesExpr,
    CallExpr,
    CastExpr,
    ClassDef,
    ComparisonExpr,
    ComplexExpr,
    ConditionalExpr,
    ContinueStmt,
    Decorator,
    DelStmt,
    DictExpr,
    DictionaryComprehension,
    EllipsisExpr,
    EnumCallExpr,
    ExpressionStmt,
    FloatExpr,
    ForStmt,
    FuncDef,
    FuncItem,
    GeneratorExpr,
    GlobalDecl,
    IfStmt,
    Import,
    ImportAll,
    ImportFrom,
    IndexExpr,
    IntExpr,
    LambdaExpr,
    ListComprehension,
    ListExpr,
    MatchStmt,
    MemberExpr,
    MypyFile,
    NamedTupleExpr,
    NameExpr,
    NewTypeExpr,
    Node,
    NonlocalDecl,
    OperatorAssignmentStmt,
    OpExpr,
    OverloadedFuncDef,
    ParamSpecExpr,
    PassStmt,
    PromoteExpr,
    RaiseStmt,
    ReturnStmt,
    RevealExpr,
    SetComprehension,
    SetExpr,
    SliceExpr,
    StarExpr,
    StrExpr,
    SuperExpr,
    TempNode,
    TryStmt,
    TupleExpr,
    TypeAlias,
    TypeAliasExpr,
    TypeAliasStmt,
    TypeApplication,
    TypedDictExpr,
    TypeVarExpr,
    TypeVarTupleExpr,
    UnaryExpr,
    Var,
    WhileStmt,
    WithStmt,
    YieldExpr,
    YieldFromExpr,
)
from mypy.patterns import (
    AsPattern,
    ClassPattern,
    MappingPattern,
    OrPattern,
    SequencePattern,
    SingletonPattern,
    StarredPattern,
    ValuePattern,
)


class TraverserVisitor:
    """A parse tree visitor that traverses the parse tree during visiting.

    It does not perform any actions outside the traversal. Subclasses
    should override visit methods to perform actions during
    traversal. Calling the superclass method allows reusing the
    traversal implementation.
    """

    def __init__(self) -> None:
        pass

    def visit(self, node: Node) -> None:
        _visit(node, self)

    def enter_node(self, node: Node) -> None:
        pass

    def leave_node(self, node: Node) -> None:
        pass

    # Visit methods

    def visit_mypy_file(self, o: MypyFile, /) -> None:
        for d in o.defs:
            _visit(d, self)

    def visit_block(self, block: Block, /) -> None:
        for s in block.body:
            _visit(s, self)

    def visit_func(self, o: FuncItem, /) -> None:
        if o.arguments is not None:
            for arg in o.arguments:
                init = arg.initializer
                if init is not None:
                    _visit(init, self)

            for arg in o.arguments:
                self.visit_var(arg.variable)

        _visit(o.body, self)

    def visit_func_def(self, o: FuncDef, /) -> None:
        self.visit_func(o)

    def visit_overloaded_func_def(self, o: OverloadedFuncDef, /) -> None:
        for item in o.items:
            _visit(item, self)
        if o.impl:
            _visit(o.impl, self)

    def visit_class_def(self, o: ClassDef, /) -> None:
        for d in o.decorators:
            _visit(d, self)
        for base in o.base_type_exprs:
            _visit(base, self)
        if o.metaclass:
            _visit(o.metaclass, self)
        for v in o.keywords.values():
            _visit(v, self)
        _visit(o.defs, self)
        if o.analyzed:
            _visit(o.analyzed, self)

    def visit_decorator(self, o: Decorator, /) -> None:
        _visit(o.func, self)
        _visit(o.var, self)
        for decorator in o.decorators:
            _visit(decorator, self)

    def visit_expression_stmt(self, o: ExpressionStmt, /) -> None:
        _visit(o.expr, self)

    def visit_assignment_stmt(self, o: AssignmentStmt, /) -> None:
        _visit(o.rvalue, self)
        for l in o.lvalues:
            _visit(l, self)

    def visit_operator_assignment_stmt(self, o: OperatorAssignmentStmt, /) -> None:
        _visit(o.rvalue, self)
        _visit(o.lvalue, self)

    def visit_while_stmt(self, o: WhileStmt, /) -> None:
        _visit(o.expr, self)
        _visit(o.body, self)
        if o.else_body:
            _visit(o.else_body, self)

    def visit_for_stmt(self, o: ForStmt, /) -> None:
        _visit(o.index, self)
        _visit(o.expr, self)
        _visit(o.body, self)
        if o.else_body:
            _visit(o.else_body, self)

    def visit_return_stmt(self, o: ReturnStmt, /) -> None:
        if o.expr is not None:
            _visit(o.expr, self)

    def visit_assert_stmt(self, o: AssertStmt, /) -> None:
        if o.expr is not None:
            _visit(o.expr, self)
        if o.msg is not None:
            _visit(o.msg, self)

    def visit_del_stmt(self, o: DelStmt, /) -> None:
        if o.expr is not None:
            _visit(o.expr, self)

    def visit_if_stmt(self, o: IfStmt, /) -> None:
        for e in o.expr:
            _visit(e, self)
        for b in o.body:
            _visit(b, self)
        if o.else_body:
            _visit(o.else_body, self)

    def visit_raise_stmt(self, o: RaiseStmt, /) -> None:
        if o.expr is not None:
            _visit(o.expr, self)
        if o.from_expr is not None:
            _visit(o.from_expr, self)

    def visit_try_stmt(self, o: TryStmt, /) -> None:
        _visit(o.body, self)
        for i in range(len(o.types)):
            tp = o.types[i]
            if tp is not None:
                _visit(tp, self)
            _visit(o.handlers[i], self)
        for v in o.vars:
            if v is not None:
                _visit(v, self)
        if o.else_body is not None:
            _visit(o.else_body, self)
        if o.finally_body is not None:
            _visit(o.finally_body, self)

    def visit_with_stmt(self, o: WithStmt, /) -> None:
        for i in range(len(o.expr)):
            _visit(o.expr[i], self)
            targ = o.target[i]
            if targ is not None:
                _visit(targ, self)
        _visit(o.body, self)

    def visit_match_stmt(self, o: MatchStmt, /) -> None:
        _visit(o.subject, self)
        for i in range(len(o.patterns)):
            _visit(o.patterns[i], self)
            guard = o.guards[i]
            if guard is not None:
                _visit(guard, self)
            _visit(o.bodies[i], self)

    def visit_type_alias_stmt(self, o: TypeAliasStmt, /) -> None:
        _visit(o.name, self)
        _visit(o.value, self)

    def visit_member_expr(self, o: MemberExpr, /) -> None:
        _visit(o.expr, self)

    def visit_yield_from_expr(self, o: YieldFromExpr, /) -> None:
        _visit(o.expr, self)

    def visit_yield_expr(self, o: YieldExpr, /) -> None:
        if o.expr:
            _visit(o.expr, self)

    def visit_call_expr(self, o: CallExpr, /) -> None:
        _visit(o.callee, self)
        for a in o.args:
            _visit(a, self)
        if o.analyzed:
            _visit(o.analyzed, self)

    def visit_op_expr(self, o: OpExpr, /) -> None:
        _visit(o.left, self)
        _visit(o.right, self)
        if o.analyzed is not None:
            _visit(o.analyzed, self)

    def visit_comparison_expr(self, o: ComparisonExpr, /) -> None:
        for operand in o.operands:
            _visit(operand, self)

    def visit_slice_expr(self, o: SliceExpr, /) -> None:
        if o.begin_index is not None:
            _visit(o.begin_index, self)
        if o.end_index is not None:
            _visit(o.end_index, self)
        if o.stride is not None:
            _visit(o.stride, self)

    def visit_cast_expr(self, o: CastExpr, /) -> None:
        _visit(o.expr, self)

    def visit_assert_type_expr(self, o: AssertTypeExpr, /) -> None:
        _visit(o.expr, self)

    def visit_reveal_expr(self, o: RevealExpr, /) -> None:
        if o.kind == REVEAL_TYPE:
            assert o.expr is not None
            _visit(o.expr, self)
        else:
            # RevealLocalsExpr doesn't have an inner expression
            pass

    def visit_assignment_expr(self, o: AssignmentExpr, /) -> None:
        _visit(o.target, self)
        _visit(o.value, self)

    def visit_unary_expr(self, o: UnaryExpr, /) -> None:
        _visit(o.expr, self)

    def visit_list_expr(self, o: ListExpr, /) -> None:
        for item in o.items:
            _visit(item, self)

    def visit_tuple_expr(self, o: TupleExpr, /) -> None:
        for item in o.items:
            _visit(item, self)

    def visit_dict_expr(self, o: DictExpr, /) -> None:
        for k, v in o.items:
            if k is not None:
                _visit(k, self)
            _visit(v, self)

    def visit_set_expr(self, o: SetExpr, /) -> None:
        for item in o.items:
            _visit(item, self)

    def visit_index_expr(self, o: IndexExpr, /) -> None:
        _visit(o.base, self)
        _visit(o.index, self)
        if o.analyzed:
            _visit(o.analyzed, self)

    def visit_generator_expr(self, o: GeneratorExpr, /) -> None:
        for index, sequence, conditions in zip(o.indices, o.sequences, o.condlists):
            _visit(sequence, self)
            _visit(index, self)
            for cond in conditions:
                _visit(cond, self)
        _visit(o.left_expr, self)

    def visit_dictionary_comprehension(self, o: DictionaryComprehension, /) -> None:
        for index, sequence, conditions in zip(o.indices, o.sequences, o.condlists):
            _visit(sequence, self)
            _visit(index, self)
            for cond in conditions:
                _visit(cond, self)
        _visit(o.key, self)
        _visit(o.value, self)

    def visit_list_comprehension(self, o: ListComprehension, /) -> None:
        _visit(o.generator, self)

    def visit_set_comprehension(self, o: SetComprehension, /) -> None:
        _visit(o.generator, self)

    def visit_conditional_expr(self, o: ConditionalExpr, /) -> None:
        _visit(o.cond, self)
        _visit(o.if_expr, self)
        _visit(o.else_expr, self)

    def visit_type_application(self, o: TypeApplication, /) -> None:
        _visit(o.expr, self)

    def visit_lambda_expr(self, o: LambdaExpr, /) -> None:
        self.visit_func(o)

    def visit_star_expr(self, o: StarExpr, /) -> None:
        _visit(o.expr, self)

    def visit_await_expr(self, o: AwaitExpr, /) -> None:
        _visit(o.expr, self)

    def visit_super_expr(self, o: SuperExpr, /) -> None:
        _visit(o.call, self)

    def visit_as_pattern(self, o: AsPattern, /) -> None:
        if o.pattern is not None:
            _visit(o.pattern, self)
        if o.name is not None:
            _visit(o.name, self)

    def visit_or_pattern(self, o: OrPattern, /) -> None:
        for p in o.patterns:
            _visit(p, self)

    def visit_value_pattern(self, o: ValuePattern, /) -> None:
        _visit(o.expr, self)

    def visit_sequence_pattern(self, o: SequencePattern, /) -> None:
        for p in o.patterns:
            _visit(p, self)

    def visit_starred_pattern(self, o: StarredPattern, /) -> None:
        if o.capture is not None:
            _visit(o.capture, self)

    def visit_mapping_pattern(self, o: MappingPattern, /) -> None:
        for key in o.keys:
            _visit(key, self)
        for value in o.values:
            _visit(value, self)
        if o.rest is not None:
            _visit(o.rest, self)

    def visit_class_pattern(self, o: ClassPattern, /) -> None:
        _visit(o.class_ref, self)
        for p in o.positionals:
            _visit(p, self)
        for v in o.keyword_values:
            _visit(v, self)

    def visit_import(self, o: Import, /) -> None:
        for a in o.assignments:
            _visit(a, self)

    def visit_import_from(self, o: ImportFrom, /) -> None:
        for a in o.assignments:
            _visit(a, self)

    # leaf nodes
    def visit_name_expr(self, o: NameExpr, /) -> None:
        return None

    def visit_str_expr(self, o: StrExpr, /) -> None:
        return None

    def visit_int_expr(self, o: IntExpr, /) -> None:
        return None

    def visit_float_expr(self, o: FloatExpr, /) -> None:
        return None

    def visit_bytes_expr(self, o: BytesExpr, /) -> None:
        return None

    def visit_ellipsis(self, o: EllipsisExpr, /) -> None:
        return None

    def visit_var(self, o: Var, /) -> None:
        return None

    def visit_continue_stmt(self, o: ContinueStmt, /) -> None:
        return None

    def visit_pass_stmt(self, o: PassStmt, /) -> None:
        return None

    def visit_break_stmt(self, o: BreakStmt, /) -> None:
        return None

    def visit_temp_node(self, o: TempNode, /) -> None:
        return None

    def visit_nonlocal_decl(self, o: NonlocalDecl, /) -> None:
        return None

    def visit_global_decl(self, o: GlobalDecl, /) -> None:
        return None

    def visit_import_all(self, o: ImportAll, /) -> None:
        return None

    def visit_type_var_expr(self, o: TypeVarExpr, /) -> None:
        return None

    def visit_paramspec_expr(self, o: ParamSpecExpr, /) -> None:
        return None

    def visit_type_var_tuple_expr(self, o: TypeVarTupleExpr, /) -> None:
        return None

    def visit_type_alias_expr(self, o: TypeAliasExpr, /) -> None:
        return None

    def visit_type_alias(self, o: TypeAlias, /) -> None:
        return None

    def visit_namedtuple_expr(self, o: NamedTupleExpr, /) -> None:
        return None

    def visit_typeddict_expr(self, o: TypedDictExpr, /) -> None:
        return None

    def visit_newtype_expr(self, o: NewTypeExpr, /) -> None:
        return None

    def visit__promote_expr(self, o: PromoteExpr, /) -> None:
        return None

    def visit_complex_expr(self, o: ComplexExpr, /) -> None:
        return None

    def visit_enum_call_expr(self, o: EnumCallExpr, /) -> None:
        return None

    def visit_singleton_pattern(self, o: SingletonPattern, /) -> None:
        return None


@functools.singledispatch
def _visit(node: Node, visitor: TraverserVisitor, /) -> None:
    msg = f"'{type(visitor).__name__}' has no visit method for '{type(node).__name__}'"
    raise NotImplementedError(msg)


@_visit.register
def _(node: MypyFile, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_mypy_file(node)
    visitor.leave_node(node)


@_visit.register
def _(node: Block, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_block(node)
    visitor.leave_node(node)


@_visit.register
def _(node: FuncItem, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_func(node)
    visitor.leave_node(node)


@_visit.register
def _(node: FuncDef, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_func_def(node)
    visitor.leave_node(node)


@_visit.register
def _(node: OverloadedFuncDef, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_overloaded_func_def(node)
    visitor.leave_node(node)


@_visit.register
def _(node: ClassDef, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_class_def(node)
    visitor.leave_node(node)


@_visit.register
def _(node: Decorator, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_decorator(node)
    visitor.leave_node(node)


@_visit.register
def _(node: ExpressionStmt, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_expression_stmt(node)
    visitor.leave_node(node)


@_visit.register
def _(node: AssignmentStmt, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_assignment_stmt(node)
    visitor.leave_node(node)


@_visit.register
def _(node: OperatorAssignmentStmt, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_operator_assignment_stmt(node)
    visitor.leave_node(node)


@_visit.register
def _(node: WhileStmt, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_while_stmt(node)
    visitor.leave_node(node)


@_visit.register
def _(node: ForStmt, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_for_stmt(node)
    visitor.leave_node(node)


@_visit.register
def _(node: ReturnStmt, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_return_stmt(node)
    visitor.leave_node(node)


@_visit.register
def _(node: AssertStmt, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_assert_stmt(node)
    visitor.leave_node(node)


@_visit.register
def _(node: DelStmt, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_del_stmt(node)
    visitor.leave_node(node)


@_visit.register
def _(node: IfStmt, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_if_stmt(node)
    visitor.leave_node(node)


@_visit.register
def _(node: RaiseStmt, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_raise_stmt(node)
    visitor.leave_node(node)


@_visit.register
def _(node: TryStmt, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_try_stmt(node)
    visitor.leave_node(node)


@_visit.register
def _(node: WithStmt, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_with_stmt(node)
    visitor.leave_node(node)


@_visit.register
def _(node: MatchStmt, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_match_stmt(node)
    visitor.leave_node(node)


@_visit.register
def _(node: TypeAliasStmt, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_type_alias_stmt(node)
    visitor.leave_node(node)


@_visit.register
def _(node: MemberExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_member_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: YieldFromExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_yield_from_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: YieldExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_yield_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: CallExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_call_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: OpExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_op_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: ComparisonExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_comparison_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: SliceExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_slice_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: CastExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_cast_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: AssertTypeExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_assert_type_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: RevealExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_reveal_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: AssignmentExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_assignment_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: UnaryExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_unary_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: ListExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_list_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: TupleExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_tuple_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: DictExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_dict_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: SetExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_set_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: IndexExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_index_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: GeneratorExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_generator_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: DictionaryComprehension, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_dictionary_comprehension(node)
    visitor.leave_node(node)


@_visit.register
def _(node: ListComprehension, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_list_comprehension(node)
    visitor.leave_node(node)


@_visit.register
def _(node: SetComprehension, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_set_comprehension(node)
    visitor.leave_node(node)


@_visit.register
def _(node: ConditionalExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_conditional_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: TypeApplication, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_type_application(node)
    visitor.leave_node(node)


@_visit.register
def _(node: LambdaExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_lambda_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: StarExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_star_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: AwaitExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_await_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: SuperExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_super_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: AsPattern, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_as_pattern(node)
    visitor.leave_node(node)


@_visit.register
def _(node: OrPattern, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_or_pattern(node)
    visitor.leave_node(node)


@_visit.register
def _(node: ValuePattern, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_value_pattern(node)
    visitor.leave_node(node)


@_visit.register
def _(node: SequencePattern, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_sequence_pattern(node)
    visitor.leave_node(node)


@_visit.register
def _(node: StarredPattern, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_starred_pattern(node)
    visitor.leave_node(node)


@_visit.register
def _(node: MappingPattern, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_mapping_pattern(node)
    visitor.leave_node(node)


@_visit.register
def _(node: ClassPattern, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_class_pattern(node)
    visitor.leave_node(node)


@_visit.register
def _(node: Import, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_import(node)
    visitor.leave_node(node)


@_visit.register
def _(node: ImportFrom, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_import_from(node)
    visitor.leave_node(node)


@_visit.register
def _(node: NameExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_name_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: StrExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_str_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: IntExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_int_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: FloatExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_float_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: BytesExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_bytes_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: EllipsisExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_ellipsis(node)
    visitor.leave_node(node)


@_visit.register
def _(node: Var, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_var(node)
    visitor.leave_node(node)


@_visit.register
def _(node: ContinueStmt, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_continue_stmt(node)
    visitor.leave_node(node)


@_visit.register
def _(node: PassStmt, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_pass_stmt(node)
    visitor.leave_node(node)


@_visit.register
def _(node: BreakStmt, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_break_stmt(node)
    visitor.leave_node(node)


@_visit.register
def _(node: TempNode, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_temp_node(node)
    visitor.leave_node(node)


@_visit.register
def _(node: NonlocalDecl, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_nonlocal_decl(node)
    visitor.leave_node(node)


@_visit.register
def _(node: GlobalDecl, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_global_decl(node)
    visitor.leave_node(node)


@_visit.register
def _(node: ImportAll, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_import_all(node)
    visitor.leave_node(node)


@_visit.register
def _(node: TypeVarExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_type_var_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: ParamSpecExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_paramspec_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: TypeVarTupleExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_type_var_tuple_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: TypeAliasExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_type_alias_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: TypeAlias, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_type_alias(node)
    visitor.leave_node(node)


@_visit.register
def _(node: NamedTupleExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_namedtuple_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: TypedDictExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_typeddict_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: NewTypeExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_newtype_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: PromoteExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit__promote_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: ComplexExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_complex_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: EnumCallExpr, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_enum_call_expr(node)
    visitor.leave_node(node)


@_visit.register
def _(node: SingletonPattern, visitor: TraverserVisitor, /) -> None:
    visitor.enter_node(node)
    visitor.visit_singleton_pattern(node)
    visitor.leave_node(node)
