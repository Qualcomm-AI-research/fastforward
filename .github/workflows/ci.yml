name: CI Pipeline

on:
  push:
    branches-ignore:
      - "pages"

jobs:
  prepare:
    if: github.server_url != 'https://github.com'
    name: Define what docker images should be built
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.final.outputs.matrix }}
    steps:
      - name: Set an image tag (use only 8 first symbols)
        run: export IMAGE_TAG="${{ github.sha }}"; echo "IMAGE_TAG=${IMAGE_TAG:0:8}" >> $GITHUB_ENV
      - env:
          VER_PYTHON: "3.10"
          VER_TORCH: "2.3"
          VER_CUDA: "12.1"
        run: |
          MATRIX=$(echo "${MATRIX:-[]}" | jq -c '. += [{
              VER_PYTHON:"${{ env.VER_PYTHON }}",
              VER_TORCH:"${{ env.VER_TORCH }}",
              VER_CUDA:"${{ env.VER_CUDA }}",
              IMAGE_NAME:"${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_IMAGE }}-py${{ env.VER_PYTHON}}-pt${{env.VER_TORCH}}-cu${{ env.VER_CUDA }}",
              IMAGE_TAG:"${{ env.IMAGE_TAG }}"
            }]')
          echo "MATRIX=$MATRIX" >> $GITHUB_ENV
      - name: (Last step) Generage docker image names
        id: final
        run: |
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "$MATRIX" > matrix.json
      - name: Save matrix for follow up workflows
        uses: actions/upload-artifact@v3
        with:
          name: matrix
          path: matrix.json

  docker:
    if: github.server_url != 'https://github.com'
    name: Build docker images
    runs-on: ubuntu-latest
    needs:
      - prepare
    strategy:
      matrix:
        include:
          - ${{ fromJSON(needs.prepare.outputs.matrix) }}
    steps:
      - run: sudo apt update -qq && sudo apt install -y make
      - uses: actions/checkout@v4
      - run: |
          export IMAGE_TAG="${{ matrix.IMAGE_TAG }}"
          export IMAGE_NAME="${{ matrix.IMAGE_NAME }}"
          make build
          echo "${{ secrets.DOCKER_CREDENTIALS }}" | docker login --username "${{ secrets.DOCKER_LOGIN }}" --password-stdin ${{ vars.DOCKER_REGISTRY }}
          make push

  wheels:
    if: github.server_url != 'https://github.com'
    name: Build wheels
    runs-on: ubuntu-latest
    container:
      image: python:3.10
    steps:
      - uses: actions/checkout@v4
      - run: |
          python3 -m pip install build
          python3 -m build --verbose --wheel --outdir=wheelhouse/
      - uses: actions/upload-artifact@v3
        with:
          name: "fastforward"
          path: "wheelhouse/*.whl"
          if-no-files-found: error
          retention-days: 1d

  pytest:
    if: github.server_url != 'https://github.com'
    name: tests
    runs-on: k8s-gpu
    needs: [wheels]
    container:
      image: python:${{ matrix.VER_PYTHON }}
    strategy:
      matrix:
        VER_PYTHON:
          - "3.10"
          - "3.12"
        VER_TORCH:
          - "2.4"
          - "2.5"
          - "2.6"
    steps:
      - name: check if tests can be skipped
        run: echo "RUN_TESTS=${{ github.ref_name == github.event.repository.default_branch || matrix.VER_PYTHON == '3.10' }}" >> $GITHUB_ENV
      - if: env.RUN_TESTS == 'true'
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            tests
            pyproject.toml
      - if: env.RUN_TESTS == 'true'
        uses: actions/download-artifact@v3
        with:
          name: "fastforward"
          path: "wheelhouse"
      - if: env.RUN_TESTS == 'true'
        run: |
          echo "torch==${{ matrix.VER_TORCH }}" > constraints.txt
          python3 -m pip install "$(find wheelhouse -name '*.whl')[test]" -c constraints.txt
      - if: env.RUN_TESTS == 'true'
        run: python3 -m pytest --include-slow
      - name: check slow tests are marked as such
        if: env.RUN_TESTS == 'true'
        run: |
          python3 -m pytest `# run non-slow test once to warm up caches`
          python3 -m pytest --timeout=0.2 
  verify:
    if: github.server_url != 'https://github.com'
    name: "${{ matrix.JOB.NAME }}"
    runs-on: ubuntu-latest
    needs:
      - prepare
      - docker
    container:
      image: "${{ matrix.IMAGE_NAME }}:${{ matrix.IMAGE_TAG }}"
      credentials:
        username: ${{ secrets.DOCKER_LOGIN }}
        password: ${{ secrets.DOCKER_CREDENTIALS }}
    strategy:
      matrix:
        JOB:
          - NAME: mypy
          - NAME: shell-check
          - NAME: format
            ARGS: --check
          - NAME: lint
          - NAME: markers-check
        include:
          - ${{ fromJSON(needs.prepare.outputs.matrix)[0] }}

    steps:
      - uses: actions/checkout@v4
      - name: "verify --${{ matrix.JOB.NAME }} -- ${{ matrix.JOB.ARGS }}"
        run: |
          . /etc/profile.d/conda.sh
          ./scripts/verify --${{ matrix.JOB.NAME }} -- ${{ matrix.JOB.ARGS }}
