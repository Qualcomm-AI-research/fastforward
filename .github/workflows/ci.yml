name: CI Pipeline

on:
  push:
    branches-ignore:
      - "pages"

jobs:
  prepare:
    if: github.server_url != 'https://github.com'
    name: Define what docker images should be built
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.final.outputs.value }}
    steps:
      - name: Set an image tag (use only 8 first symbols)
        run: export IMAGE_TAG="${{ github.sha }}"; echo "IMAGE_TAG=${IMAGE_TAG:0:8}" >> $GITHUB_ENV

      - name: "python 3.10; torch 2.3; cuda 11.8"
        run: |
          VALUE=$(echo "${VALUE:-"{}"}" | jq -c '.include += [
              { "VER_PYTHON":"3.10", "VER_TORCH":"2.3.0", "VER_CUDA": "11.8.0" }
            ]')
          echo "VALUE=$VALUE" >> $GITHUB_ENV

      - name: "python 3.10; torch 2.4; cuda 12.1"
        run: |
          VALUE=$(echo "${VALUE:-"{}"}" | jq -c '.include += [
              { "VER_PYTHON":"3.10", "VER_TORCH":"2.4.1", "VER_CUDA": "12.1.1" }
            ]')
          echo "VALUE=$VALUE" >> $GITHUB_ENV

      - name: "python 3.10; torch 2.5; cuda 12.4"
        run: |
          VALUE=$(echo "${VALUE:-"{}"}" | jq -c '.include += [
              { "VER_PYTHON":"3.10", "VER_TORCH":"2.5.0", "VER_CUDA": "12.4.1" }
            ]')
          echo "VALUE=$VALUE" >> $GITHUB_ENV

      - name: (Last step) Generage docker image names
        id: final
        run: |
          set -x
          VALUE=$(echo "$VALUE" | jq -c '.include[] |= . + {
            "IMAGE_NAME": ("${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_IMAGE }}-py" + .VER_PYTHON +"-pt" + .VER_TORCH + "-cu" + .VER_CUDA),
            "IMAGE_TAG": "'"$IMAGE_TAG"'"
            }')
          echo "$VALUE" > matrix.json
          echo "value=$VALUE" >> $GITHUB_OUTPUT

      - name: Save matrix for follow up workflows
        uses: actions/upload-artifact@v3
        with:
          name: matrix
          path: matrix.json

  docker:
    if: github.server_url != 'https://github.com'
    name: Build docker images
    runs-on: ubuntu-latest
    needs: [prepare]
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    steps:
      - run: sudo apt update -qq && sudo apt install -y make
      - uses: actions/checkout@v4
      - run: |
          export IMAGE_TAG="${{ matrix.IMAGE_TAG }}"
          export IMAGE_NAME="${{ matrix.IMAGE_NAME }}"
          make build
          echo "${{ secrets.DOCKER_CREDENTIALS }}" | docker login --username "${{ secrets.DOCKER_LOGIN }}" --password-stdin ${{ vars.DOCKER_REGISTRY }}
          make push

  wheels:
    if: github.server_url != 'https://github.com'
    name: Build wheels
    runs-on: ubuntu-latest
    needs: [prepare]
    container:
      image: python:${{ matrix.VER_PYTHON }}
    strategy:
      matrix:
        VER_PYTHON: ["3.10"]
    steps:
      - uses: actions/checkout@v4
      - run: |
          python3 -m pip install build
          python3 -m build --verbose --wheel --outdir=wheelhouse/
      - uses: actions/upload-artifact@v3
        with:
          name: "${{ matrix.VER_PYTHON }}"
          path: "wheelhouse/*.whl"
          if-no-files-found: error
          retention-days: 1d

  pytest:
    if: github.server_url != 'https://github.com'
    name: tests
    runs-on: k8s-gpu
    needs: [prepare, docker, wheels]
    container:
      image: "${{ matrix.IMAGE_NAME }}:${{ matrix.IMAGE_TAG }}"
      credentials:
        username: ${{ secrets.DOCKER_LOGIN }}
        password: ${{ secrets.DOCKER_CREDENTIALS }}
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            tests
            pyproject.toml
      - uses: actions/download-artifact@v3
        with:
          name: "${{ matrix.VER_PYTHON }}"
          path: "wheelhouse"
      - run: |
          . /etc/profile.d/conda.sh
          python3 -m pip install "$(find wheelhouse -name '*.whl')[test]"
          python3 -m pytest --include-slow

  verify:
    if: github.server_url != 'https://github.com'
    name: "${{ matrix.JOB.NAME }}"
    runs-on: ubuntu-latest
    needs: [prepare, docker]
    container:
      image: "${{ matrix.IMAGE_NAME }}:${{ matrix.IMAGE_TAG }}"
      credentials:
        username: ${{ secrets.DOCKER_LOGIN }}
        password: ${{ secrets.DOCKER_CREDENTIALS }}
    strategy:
      matrix:
        IMAGE_NAME: ["${{ fromJSON(needs.prepare.outputs.matrix).include[0].IMAGE_NAME }}"]
        IMAGE_TAG: ["${{ fromJSON(needs.prepare.outputs.matrix).include[0].IMAGE_TAG }}"]
        JOB:
          - NAME: mypy
          - NAME: shell-check
          - NAME: format
            ARGS: --check
          - NAME: lint
          - NAME: markers-check
    steps:
      - uses: actions/checkout@v4
      - run: |
          . /etc/profile.d/conda.sh
          ./scripts/verify --${{ matrix.JOB.NAME }} -- ${{ matrix.JOB.ARGS }}

